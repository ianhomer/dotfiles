.\" Automatically generated by Pandoc 2.9.2.1
.\"
.TH "" "" "" "" ""
.hy
.SH dotme user guide
.SS NAME
.PP
\f[B]dotme\f[R] - manage environment driven by these \[lq]dot
files\[rq].
.SS SYNOPSIS
.PP
\f[B]dotme [-h] [-vd]\f[R] [command]
.SS DESCRIPTION
.PP
The \f[B]dotme\f[R] utility installs and configures a local computer
environment based driven by an opinionated set of \[lq]dot files\[rq].
These \[lq]dot files\[rq] drive a common configuration for tools like
vim, tmux and brew.
By running this on all local environment you can ensure that all local
environments worked on are the configured the same.
.PP
Supported commands are as follows:
.TP
\f[B]packages\f[R]
install packages with local package manager, e.g.\ brew or pacman
.TP
\f[B]clean\f[R]
clean up caches
.TP
\f[B]compile\f[R]
compile resource such as man files
.TP
\f[B]help\f[R]
this help
.TP
\f[B]install\f[R] (default)
install all configurations
.TP
\f[B]man\f[R]
view these man files
.TP
\f[B]pull\f[R]
update local configuration files from git source
.TP
\f[B]stow\f[R]
stow the configuration files so that each tool picks up the desired
configuration.
.TP
\f[B]uninstall\f[R]
uninstall the dot file configuration, reversing some of the steps made
during installing.
Note that this is not a complete reversal, for example applications
installed with brew will remain.
.TP
\f[B]unstow\f[R]
reverse of the \f[B]stow\f[R] operation
.TP
\f[B]update\f[R]
update packages already installed, e.g.\ brew packages
.SS OPTIONS
.TP
-h
this help
.TP
-v
verbose mode
.TP
-d
dry run
.SH My .dotfiles
.PP
Configure my computers, to reduce distraction and and with less
clickity-clickity.
.SS tl;dr
.PP
First time clone repository and install:
.IP
.nf
\f[C]
git clone git\[at]github.com:ianhomer/dotfiles.git \[ti]/.dotfiles
\[ti]/.dotfiles/bin/dotme
\f[R]
.fi
.PP
Then update at any time with:
.IP
.nf
\f[C]
dotme
\f[R]
.fi
.PP
This gets local up to date, including pulling latest version of this
repository, sets OSX defaults, updates brew including packages.
This can be run anytime to just get onto latest.
.SS Why
.PP
The configuration process in this repository provides me my preferred
way of working to streamline distraction free coding.
This includes:
.TP
\f[B]brew\f[R]
package manager
.TP
\f[B]fish\f[R]
friendly interactive shell
.TP
\f[B]git\f[R]
source control
.TP
\f[B]kitty\f[R]
slick terminal
.TP
\f[B]tmux\f[R]
terminal multiplexer
.TP
\f[B]neovim\f[R] with \f[B]Conquerer of Completion\f[R]
file editing
.TP
\f[B]FiraCode Nerd Font\f[R]
ligatures, powerline and more
.PP
\f[B]alfred (https://www.alfredapp.com/),
dozer (https://github.com/Mortennn/Dozer),
magnet (https://magnet.crowdcafe.com/)\f[R] : MacOS+ with better
hotkeys, focused status bar and window manager
.SS How
.PP
Various dotfiles are all located in sub-folders in the dotfiles/ folder
for various tools.
On installation, each of these are stowed in to your home directory,
i.e.\ original backed up and dotfiles linked into place.
Further installation and configuration takes place with scripts in the
bin/ directory, however just look at bin/dotme to see what actually
happens.
.PP
You can also update parts of the initialisation separately, see
\f[C]dotme -h\f[R] to get a list of each part.
.SS Manual Configuration
.PP
I\[cq]ve not worked out how to automate all configuration.
Until I do, this is what I manually do on each environment.
.SS Initialise a few desktop apps
.SS Dozer
.PP
Open dozer and configure menu hiding.
.SS Alfred
.PP
Open Alfred, set up privacy options, point configuration to a cloud
storage of your choosing, and configure Alfred to your choosing.
.PP
Alfred Preferences -> Advanced -> Set Preferences folder ->
\[ti]/.dotfiles/config/alfred
.SS Keyboard Configuration - MacOS
.PP
System preferences -> keyboard -> Modifier Keys -> For each keyboard :
.IP \[bu] 2
Caps Lock -> Escape
.PP
For a Microsoft keyboard :
.IP \[bu] 2
Option Key -> Command
.IP \[bu] 2
Command Key -> Option
.PP
And then use keyboard
shortcuts (https://support.google.com/mail/answer/6594) - see Cheatsheet
for my favourites.
.SS Gmail
.PP
Gmail -> Settings -> Keyboard Shortcuts -> Keyboard shortcuts on
.SS Thanks
.PP
Too many dotfiles projects out there that have given me inspiration to
mention them all, although Awesome
dotfiles (https://github.com/webpro/awesome-dotfiles) make a good
attempt to.
However, particular thanks to:
.IP \[bu] 2
webpro (https://github.com/webpro/dotfiles)
.IP \[bu] 2
Mathias (https://github.com/mathiasbynens/dotfiles)
.IP \[bu] 2
Paul Irish (https://github.com/paulirish/dotfiles)
.IP \[bu] 2
Managing dotfiles with
stow (https://alexpearce.me/2016/02/managing-dotfiles-with-stow/)
.IP \[bu] 2
egel (https://github.com/egel/dotfiles)
.IP \[bu] 2
Ultimate vim configuration (https://github.com/amix/vimrc)
.IP \[bu] 2
noctuid - keyboard-based workflows (https://github.com/noctuid/dotfiles)
.SH Cheats - fish
.SS fish
.TP
\f[B]Ctrl-a Ctrl-a\f[R]
beginning of line
.TP
\f[B]Ctrl-e\f[R]
end of line
.TP
\f[B]Ctrl-b\f[R]
back a word
.TP
\f[B]Ctrl-f\f[R]
forward a word
.TP
\f[B]bind\f[R]
see key bindings
.SH Cheats
.SS OSX
.TP
\f[B]Ctrl+Up\f[R]
Mission Control / space management
.TP
\f[B]Ctrl-right/left\f[R]
Move to other spaces
.TP
\f[B]Ctrl+Cmd+click+drag\f[R]
Move Window
.TP
\f[B]Ctrl+Cmd+space\f[R]
Open special character window
.TP
\f[B]Cmd+Tab\f[R]
Switch windows
.TP
\f[B]Cmd+h\f[R]
Hide window
.TP
\f[B]Cmd+c\f[R]
Copy
.TP
\f[B]Cmd+v\f[R]
Paste
.TP
\f[B]Cmd+z\f[R]
Undo
.TP
\f[B]Cmd+Shift+.\f[R] - in finder window
Show hidden files
.SH Cheats - vi
.SS vi
.SS vi - Files, Buffers & Navigations
.IP \[bu] 2
\f[B]:NERDTreeToggle\f[R] or \f[B]space+f\f[R] - Open file browser
.RS 2
.IP \[bu] 2
\f[B]m\f[R] - open file actions
.IP \[bu] 2
\f[B]Shift+i\f[R] - show hidden files
.RE
.IP \[bu] 2
\f[B]:cd\f[R] - change directory
.IP \[bu] 2
\f[B]space + r\f[R] or \f[B]:reg\f[R] - show paste buffer
.IP \[bu] 2
\f[B]:bd\f[R] - close buffer
.IP \[bu] 2
\f[B]:bn\f[R] - next buffer
.IP \[bu] 2
\f[B]\[dq]2p\f[R] - paste a previous cut
.IP \[bu] 2
\f[B]gf\f[R] - go to file under cursor
.IP \[bu] 2
\f[B]gx\f[R] - open link in browser
.IP \[bu] 2
\f[B]gt\f[R] - go to next tab
.IP \[bu] 2
\f[B]tabe\f[R] - open file in new tab
.IP \[bu] 2
\f[B]bufdo bd\f[R] - close all buffers
.IP \[bu] 2
\f[B]m\f[R] + letter - set mark
.IP \[bu] 2
\f[B]\[cq]\f[R] + letter - go to mark
.IP \[bu] 2
\f[B]Ctrl-\[ha]\f[R] - switch to previous buffer
.IP \[bu] 2
\f[B]:tab h whatever\f[R] - open help in a new tab
.IP \[bu] 2
\f[B]Ctrl-w o\f[R] - make pane the only visible one
.IP \[bu] 2
\f[B]:noh\f[R] - clear last highlight
.IP \[bu] 2
\f[B]:enew|pu=execute(`autocmd')\f[R] - copy output of command,
e.g.\ autocmd, into buffer
.SS netrw
.IP \[bu] 2
\f[B]-\f[R] - up a directory
.IP \[bu] 2
\f[B]i\f[R] - change list view
.IP \[bu] 2
\f[B]I\f[R] - show header
.IP \[bu] 2
\f[B]gn\f[R] - make current node root of tree
.IP \[bu] 2
\f[B]gh\f[R] - hide/un-hide dot files
.IP \[bu] 2
\f[B]%\f[R] - create new file
.SS Go to
.IP \[bu] 2
\f[B]0\f[R] - beginning of line
.IP \[bu] 2
\f[B]$\f[R] - end of line
.IP \[bu] 2
\f[B]}\f[R] - next block
.IP \[bu] 2
\f[B]{\f[R] - previous block
.IP \[bu] 2
\f[B][[\f[R] - next header
.IP \[bu] 2
\f[B]]]\f[R] - previous header
.IP \[bu] 2
\f[B]:nn\f[R] - line nn
.IP \[bu] 2
\f[B]gg\f[R] - beginning of file
.IP \[bu] 2
\f[B]GG\f[R] - end of file
.IP \[bu] 2
\f[B]%\f[R] - next / previous bracket
.SS vi - Window Management
.IP \[bu] 2
\f[B]:split,:vsplit\f[R] - split pane
.IP \[bu] 2
\f[B]80 Ctrl-w\f[R] + - set current pane to 80 characters
.IP \[bu] 2
\f[B]Ctrl-w+left/right\f[R] or \f[B]Ctrl-h/j/k/l\f[R] - move to another
pane
.IP \[bu] 2
\f[B]countcc\f[R] - comment out the next count lines
.SS vi - Editing
.TP
:\f[B]:Goyo\f[R]
distraction free coding
.TP
\f[B]gw{motion}\f[R]
reformat content
.TP
\f[B]select+gw\f[R]
reformat content
.TP
\f[B]select+S\[dq]\f[R]
surround selected \f[B]area\f[R] with quotes
.TP
\f[B]ysiw\[dq]\f[R]
surround word with quotes
.TP
\f[B]Ctrl-v\f[R]
select visual block, e.g.\ column
.TP
\f[B]:%!jq .\f[R]
reformat JSON
.TP
\f[B]:Tabularize /|\f[R] or **space**
Align paragraph on character
.TP
\f[B]countcc\f[R]
comment out the next count lines
.TP
\f[B]:Format\f[R]
Format current buffer
.TP
\f[B]d\f[R]
Open CoC diagnostics
.SS vi - Markdown
.IP \[bu] 2
\f[B]viWS+\f[R] - make a word bold
.IP \[bu] 2
\f[B]zR\f[R] - open all folds
.IP \[bu] 2
\f[B]zM\f[R] - close all folds
.SS vi - Selections
.IP \[bu] 2
\f[B]vip\f[R] - select paragraph
.IP \[bu] 2
\f[B]viW\f[R] - select current word (including non-alphanumeric)
.SH Cheats - vim
.SS vi
.SS Files, Buffers & Navigations
.TP
\f[B]:NERDTreeToggle\f[R] or \f[B]space+f\f[R]
Open file browser
.TP
\f[B]:cd\f[R]
change directory
.TP
\f[B]space + r\f[R] or \f[B]:reg\f[R]
show paste buffer
.TP
\f[B]:bd\f[R]
close buffer
.TP
\f[B]:bn\f[R]
next buffer
.TP
\f[B]\[dq]2p\f[R]
paste a previous cut
.TP
\f[B]gf\f[R]
go to file under cursor
.TP
\f[B]gx\f[R]
open link in browser
.TP
\f[B]gt\f[R]
go to next tab
.TP
\f[B]tabe\f[R]
open file in new tab
.TP
\f[B]bufdo bd\f[R]
close all buffers
.TP
\f[B]m\f[R] + letter
set mark
.TP
\f[B]\[cq]\f[R] + letter
go to mark
.TP
\f[B]Ctrl-\[ha]\f[R]
switch to previous buffer
.TP
\f[B]:tab h whatever\f[R]
open help in a new tab
.TP
\f[B]Ctrl-w o\f[R]
make pane the only visible one
.TP
\f[B]:noh\f[R]
clear last highlight
.TP
\f[B]:enew|pu=execute(`autocmd')\f[R]
copy output of command, e.g.\ autocmd, into buffer
.SS NERDTree
.TP
\f[B]m\f[R]
open file actions
.TP
\f[B]Shift+i\f[R]
show hidden files
.SS netrw
.IP \[bu] 2
\f[B]-\f[R] - up a directory
.IP \[bu] 2
\f[B]i\f[R] - change list view
.IP \[bu] 2
\f[B]I\f[R] - show header
.IP \[bu] 2
\f[B]gn\f[R] - make current node root of tree
.IP \[bu] 2
\f[B]gh\f[R] - hide/un-hide dot files
.IP \[bu] 2
\f[B]%\f[R] - create new file
.SS Go to
.IP \[bu] 2
\f[B]0\f[R]- beginning of line
.IP \[bu] 2
\f[B]$\f[R] - end of line
.IP \[bu] 2
\f[B]}\f[R] - next block
.IP \[bu] 2
\f[B]{\f[R] - previous block
.IP \[bu] 2
\f[B][[\f[R] - next header
.IP \[bu] 2
\f[B]]]\f[R] - previous header
.IP \[bu] 2
\f[B]:nn\f[R] - line nn
.IP \[bu] 2
\f[B]gg\f[R] - beginning of file
.IP \[bu] 2
\f[B]GG\f[R] - end of file
.IP \[bu] 2
\f[B]%\f[R] - next / previous bracket
.SS vi - Window Management
.IP \[bu] 2
\f[B]:split,:vsplit\f[R] - split pane
.IP \[bu] 2
\f[B]80 Ctrl-w\f[R] + - set current pane to 80 characters
.IP \[bu] 2
\f[B]Ctrl-w+left/right\f[R] or \f[B]Ctrl-h/j/k/l\f[R] - move to another
pane
.IP \[bu] 2
\f[B]countcc\f[R] - comment out the next count lines
.SS vi - Editing
.TP
:\f[B]:Goyo\f[R]
distraction free coding
.TP
\f[B]gw{motion}\f[R]
reformat content
.TP
\f[B]select+gw\f[R]
reformat content
.TP
\f[B]select+S\[dq]\f[R]
surround selected \f[B]area\f[R] with quotes
.TP
\f[B]ysiw\[dq]\f[R]
surround word with quotes
.TP
\f[B]Ctrl-v\f[R]
select visual block, e.g.\ column
.TP
\f[B]:%!jq .\f[R]
reformat JSON
.TP
\f[B]:Tabularize /|\f[R] or **space**
Align paragraph on character
.TP
\f[B]countcc\f[R]
comment out the next count lines
.TP
\f[B]:Format\f[R]
Format current buffer
.TP
\f[B]d\f[R]
Open CoC diagnostics
.SS vi - Markdown
.IP \[bu] 2
\f[B]viWS+\f[R] - make a word bold
.IP \[bu] 2
\f[B]zR\f[R] - open all folds
.IP \[bu] 2
\f[B]zM\f[R] - close all folds
.SS vi - Selections
.IP \[bu] 2
\f[B]vip\f[R] - select paragraph
.IP \[bu] 2
\f[B]viW\f[R] - select current word (including non-alphanumeric)
.SH Cheatsheet
.PP
Useful keyboard short cuts.
.SS Todoist
.TP
\f[B]Ctrl-Cmd+a\f[R]
Create task
.TP
\f[B]Ctrl-Cmd-t\f[R]
Open up tasks list
.SS Magnet
.TP
\f[B]Ctrl-Alt+return\f[R]
Full screen
.TP
\f[B]Ctrl-Alt-left,right,up,down\f[R]
Half screen
.TP
\f[B]Ctrl-Alt-uijk\f[R]
Quarter screen
.TP
\f[B]Ctrl-Alt-deftg\f[R]
Thirds
.TP
\f[B]Ctrl-Cmd-back\f[R]
Back to manually set screen size
.SS Brave
.TP
\f[B]Cmd+l\f[R]
Jump to address bar
.TP
\f[B]Option+Cmd\f[R] left/right
Go to previous/next tab
.TP
\f[B]Cmd+w\f[R]
Close tab
.TP
\f[B]Option+Cmd b\f[R]
Open bookmarks
.SS iterm
.TP
\f[B]Cmd+n\f[R]
New terminal window
.TP
\f[B]git open\f[R]
Open git repository in web browser
.TP
\f[B]z my-dir \f[R]
find recently opened folder (using fasd)
.TP
\f[B]z\f[R]
list recently opened folder we
.SS tmux
.TP
\f[B]Ctrl-a\f[R]
prefix
.TP
prefix \f[B]c\f[R]
new window
.TP
prefix \f[B]w\f[R]
show windows
.TP
prefix \f[B],\f[R]
rename window
.TP
prefix \f[B]$\f[R]
rename session
.TP
prefix \f[B]|\f[R] or \f[B]-\f[R]
split pane
.TP
prefix \f[B]x\f[R]
close pane
.TP
\f[B]prefix s\f[R]
choose session
.TP
prefix \f[B]t\f[R]
show time
.TP
prefix \f[B]z\f[R]
zoom in / out of current pane
.TP
prefix \f[B]d\f[R]
detach from session
.TP
\f[B]Opt-arrow\f[R]
move between panes
.TP
\f[B]prefix Ctrl-s\f[R]
save tmux state
.TP
\f[B]prefix Ctrl-r\f[R]
reload tmux state
.TP
\f[B]Ctrl-hjkl\f[R]
move between panes including through vim panes
.TP
\f[B]Ctrl-arrow\f[R]
move between panes including through vim panes
.TP
\f[B]Ctrl-Shift-arrow\f[R]
move window left or right in tab order
.TP
prefix \f[B]space\f[R]
toggle between layouts
.TP
prefix \f[B][\f[R]
copy mode with \f[B]Enter\f[R] to copy selection
.TP
prefix \f[B]{}\f[R]
move pane left / right
.TP
hold option + mouse
bypass tmux mouse handling and do iterm action
.TP
click command click
block select
.PP
more tmux cheats (https://tmuxcheatsheet.com/)
.PP
from outside tmux
.TP
\f[B]tmux ls\f[R]
list sessions
.TP
\f[B]tmux attach -t my-session\f[R]
attach to session
.SS git
.TP
\f[B]git-set-personal-url\f[R]
set the repository to push with personal credentials
.SS Document conversions
.TP
\f[B]pandoc README.md -s -o \[ti]/tmp/test.pdf\f[R]
convert markdown file to PDF
.SS Gmail
.PP
gmail keyboard shortcuts (https://support.google.com/mail/answer/6594) :
.IP \[bu] 2
\f[B]Shift-?\f[R] - keyboard shortcuts
.IP \[bu] 2
\f[B],\f[R] - move focus
.IP \[bu] 2
\f[B]e\f[R] - archive message
.IP \[bu] 2
\f[B]s\f[R] - star message
.SH todo
.SS backlog
.IP \[bu] 2
Create a way to report on any files not checked in any of my bookmarked
places
.RS 2
.IP \[bu] 2
z, fastd or autojump, z.lua
.RE
.IP \[bu] 2
Improve report tool (use python)
.RS 2
.IP \[bu] 2
brew leaves - report what\[cq]s been explicitly installed (over and
above dotfiles), suggest what packages should be removed / auto-prune
option
.RE
.IP \[bu] 2
Pre-run xcode-select \[en]install
.IP \[bu] 2
If necessary execute npm install -g npm
.IP \[bu] 2
Change default shell to fish - currently done manually with
\f[C]chsh -s /usr/local/bin/fish\f[R]
.IP \[bu] 2
Disable Mac OS auto correct keyboard -> text
.IP \[bu] 2
Use includeIf to include git config per organisation / user profile
.IP \[bu] 2
Automatically load tmux plugins, currently need to do C-a I
.IP \[bu] 2
Auto jenv enable-plugin maven
.IP \[bu] 2
Use cSpell tools to compile dictionaries trie files from txt words file
.IP \[bu] 2
How to make dictionary files available to other tools (other than vim)
.IP \[bu] 2
Ignore package-lock.json for spelling
.IP \[bu] 2
Deploy dotfiles in docker to test fresh install on other OS
.IP \[bu] 2
Try coc-eslint, coc-flow (typescript)
.IP \[bu] 2
Set default directory for tmux window so new panes start in given
directory
.IP \[bu] 2
experiment with markdown linting more, doesn\[cq]t seem to lint list
line wrapping well.
\f[C]gq\f[R] shortcut ends up putting line wrap in a new list item.
Can \f[C]:Format\f[R] be improved to just sort this out?
.IP \[bu] 2
report on launchtl services on startup / suggest pruning.
\f[C]launchtl list\f[R],
\f[C]ls /Library/LaunchAgents\f[R],\f[C]ls /Library/LaunchDaemons\f[R].
Look at errors in start up logs to report which are zombies
.IP \[bu] 2
network speed monitoring, e.g.\ \f[C]npm install --global fast-cli\f[R]
.IP \[bu] 2
try java and python code completion on all envs
.IP \[bu] 2
Update spelling add word to only add to .cspell.json not also
\&.vim/coc-settings.json
.SS themes
.IP \[bu] 2
system monitoring, e.g.\ network speed
.IP \[bu] 2
linting
.IP \[bu] 2
cheatsheet management - e.g.\ <https://github.com/denisidoro/navi,>
<https://github.com/tldr-pages/tldr>, cheat.
<https://github.com/mutdmour/alfred-workflow-cheatsheet/tree/master/src/apps>
man pages.
Integrate with alfred.
Export automatically from tools.
.RS 2
.PP
ln -s \[ti]/.dotfiles/config/navi/fish
\[ti]/Library/Application\ Support/navi/cheats/ ln -s
\[ti]/.dotfiles/config/navi/vi
\[ti]/Library/Application\ Support/navi/cheats/
.PP
drive cheats from module md files which output well to man files with
pandoc convert automatically as necessary to inputs required by navi,
cheat and alfred.
.RE
