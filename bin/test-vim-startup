#!/usr/bin/env python3

# Output startup performance for vim, for example:

#  vim : 0 :  19 : 100% : zero (baseline)
#  vim : 0 :  22 : 115% : noplugin
#  vim : 1 :  36 : 189% : noplugin
# nvim : 0 :  34 : 178% : zero (baseline)
# nvim : 0 :  45 : 132% : noplugin
# nvim : 0 :  57 : 167% :
# nvim : 1 :  60 : 176% :
# nvim : 2 :  60 : 176% :
# nvim : 3 :  67 : 197% :
# nvim : 4 :  79 : 232% :
# nvim : 5 : 134 : 394% :
# Run in   :1861 ms


import argparse
import os
import subprocess
import time
from timeit import Timer


def run():
    parser = argparse.ArgumentParser(description="test vim startup")
    parser.add_argument("--iterations", type=int, help="iterations", default=3)
    args = parser.parse_args()

    timeAll(args)


def timeAll(args):
    start = time.time()
    baseline = timeOne(
        ["vim", "--noplugin", "-u", "NONE", "+q"], 0, args, "zero (baseline)", 0
    )
    timeOne(["vim", "--noplugin", "+q"], 0, args, "noplugin", baseline)
    timeOne(["vim", "--noplugin", "+q"], 1, args, "noplugin", baseline)
    baseline = timeOne(
        ["nvim", "--noplugin", "-u", "NONE", "+q"], 0, args, "zero (baseline)", baseline
    )
    timeOne(["nvim", "--noplugin", "+q"], 0, args, "noplugin", baseline)
    for knob in range(6):
        timeOne(["nvim", "+q"], knob, args, "", baseline)
    print(f"Run in   :{int((time.time() - start)*1000)} ms")


def timeOne(command, knob, args, label, baseline=0):
    def process():
        subprocess.call(command, env={**os.environ, "VIM_KNOB": f"{knob}"})

    t = Timer(process)
    time = int(t.timeit(args.iterations) * 1000 / args.iterations)
    if baseline > 0:
        factor = int(100 * time / baseline)
    else:
        factor = 100
    print(f"{command[0]:>4} : {knob} : {time:>3} : {factor:>3}% : {label}")
    return time


run()
