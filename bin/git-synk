#!/usr/bin/env python3

#
# Synchronise a local git repository with remote
#

import os
import re
from subprocess import call, getoutput, STDOUT


def is_git_repo(path):
    return os.path.isdir(path) and (
        call(
            ["git", "rev-parse"], cwd=path, stderr=STDOUT, stdout=open(os.devnull, "w")
        )
        == 0
    )


def get_branch_name():
    heads = getoutput("git describe --all")
    match = re.search("heads/(.*)", heads)
    if match:
        return match.group(1)
    raise Exception(
        f"heads of git repository is {heads} and does not match 'heads/*"
    )


def synk(path):
    if not is_git_repo(path):
        raise Exception(
            f"Directory {path} is not a git repository and can not be synked"
        )
    os.chdir(path)
    print(path)
    print("synching")
    branch = get_branch_name()
    print(f"Branch {branch}")


def run():
    cwd = os.getcwd()
    print(cwd)
    if is_git_repo(cwd):
        synk(cwd)
    else:
        for child in os.listdir(cwd):
            directory = os.path.join(cwd, child)
            if is_git_repo(directory):
                synk(directory)


run()
