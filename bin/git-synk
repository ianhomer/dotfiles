#!/usr/bin/env python3

#
# Synchronise a local git repository with remote
#

import argparse
import datetime
import os
import re
from subprocess import call, getoutput, STDOUT


def is_git_repo(path):
    return os.path.isdir(path) and (
        call(
            ["git", "rev-parse"], cwd=path, stderr=STDOUT, stdout=open(os.devnull, "w")
        )
        == 0
    )


def get_branch_name():
    heads = getoutput("git describe --all")
    match = re.search("heads/(.*)", heads)
    if match:
        return match.group(1)
    raise Exception(
        f"heads of git repository {os.getcwd()} is {heads} and "
        + "does not match 'heads/*'."
        + "Perhaps a rebase is in flight"
    )


# Reduce branch name and original name, for example:
#   feature/abc becomes f/abc
#   user@host:/path/to/repository becomes u@h:/p/t/repository
def reduce_git_uri(uri):
    return re.compile("([a-z])[.a-z]*([/@:])").sub(r"\1\2", uri)


def printf(message):
    print(message, end="")


def synk(path, fetch_window: int):
    if not is_git_repo(path):
        raise Exception(
            f"Directory {path} is not a git repository and can not be synked"
        )
    os.chdir(path)
    repository_name = os.path.basename(path)
    branch_name = get_branch_name()
    changes = int(getoutput("git status --porcelain | wc -l"))
    auto_commit = getoutput("git config core.autocommit") == "true"
    original_url = getoutput("git config --get remote.origin.url")
    remote_name = getoutput(f"git config --get branch.{branch_name}.remote")

    if changes > 0:
        if auto_commit:
            os.system("git add -A ; git commit --quiet -m sync")
        else:
            print(
                f"∷ ◉ {repository_name} - set autocommit with "
                + "git synk -a to commit local"
            )
            return

    print("▻ ", end="")

    dated_file = f"{path}/.git/FETCH_HEAD"
    if not os.path.exists(dated_file):
        dated_file = f"{path}/.git/HEAD"
    last_modified = datetime.datetime.fromtimestamp(os.path.getmtime(dated_file))
    now = datetime.datetime.now()
    if last_modified + datetime.timedelta(seconds=fetch_window) < now:
        printf(".")
        os.system("git fetch")
        printf(".")
    else:
        printf("∷ ")

    if remote_name != "":
        left_right_as_string = getoutput(
            f"git rev-list --count --left-right {remote_name}/{branch_name}...HEAD"
        )
        [left, right] = list(map(lambda a: int(a), left_right_as_string.split()))
        # Determine action about to take place
        if left > 0:
            if right > 0:
                action = f"↓ {left} ↑ {right}"
            else:
                action = f"↓ {left}"
        elif right > 0:
            action = f"↑ {right}"
        else:
            action = "≡"
    else:
        (left, right) = (0, 0)
        action = "✧"

    print(
        f"{action} {reduce_git_uri(branch_name)} {reduce_git_uri(original_url)}", end=""
    )

    if left > 0:
        printf(" ↓")
        os.system("git rebase")

    if right > 0:
        printf(" ↑")
        os.system("git push")

    print(" ☆")


def run():
    parser = argparse.ArgumentParser(description="Git synk")
    parser.add_argument("--window", "-w", help="fetch window in seconds", default=600)
    args = parser.parse_args()

    fetch_window = int(args.window)

    cwd = os.getcwd()
    match = re.search("projects/things", cwd)
    if not match:
        raise Exception("Can only sync in project/things directory")

    if is_git_repo(cwd):
        synk(cwd, fetch_window=fetch_window)
    else:
        for child in os.listdir(cwd):
            directory = os.path.join(cwd, child)
            if is_git_repo(directory):
                synk(directory, fetch_window=fetch_window)


run()
