#!/usr/bin/env python3

#
# Test font rendering in terminal
#
# For example, the following tests unicode selector with long lines which
# can sometimes trip up terminal rendering
#
#   test-fonts --selector --repeat=7 --postcharacters=300 --nolabel


import argparse

parser = argparse.ArgumentParser(formatter_class=argparse.RawDescriptionHelpFormatter)
parser.add_argument("--ascii", action="store_true")
parser.add_argument("--selector", action="store_true")
parser.add_argument("--single", action="store_true")
parser.add_argument("--unicoderange", action="store_true")
parser.add_argument("--emojirange", action="store_true")
parser.add_argument("--nolabel", action="store_true")
parser.add_argument("--postlabel", action="store_true")
parser.add_argument(
    "--postcharacters",
    default="0",
    help="append given number of characters at end of line to force a line wrap",
)
parser.add_argument("--repeat", default="1")

args = parser.parse_args()

all = (
    not args.selector
    and not args.ascii
    and not args.single
    and not args.unicoderange
    and not args.emojirange
)

postCharacters = int(args.postcharacters)


def printMultiple(label, *chars):
    printCharacters(label, chars)


def printRange(label, start, end):
    printCharacters(label, range(start, end + 1))


def printCharacters(label, chars):
    print(
        label.ljust(20, " "), end=" "
    ) if not args.nolabel and not args.postlabel else None
    for c in chars:
        print(chr(c), end="")
    print(" " + label, end="") if args.postlabel else None
    print(" " + "." * postCharacters, end="") if postCharacters > 0 else None
    print(end="\n")


for i in range(0, int(args.repeat)):
    printRange("  ascii range", 0x30, 0x39) if all or args.ascii else None
    # https://unicode.org/reports/tr28/tr28-3.html#13_7_variation_selectors
    # the variation selector FE0F can extend the preceding character into
    # a double width character
    printMultiple("unicode selector", 0x26A0, 0xFE0F) if all or args.selector else None
    printMultiple("unicode single", 0x26A0) if all or args.single else None
    printRange("unicode range", 0x26A0, 0x26A9) if all or args.unicoderange else None
    printRange(
        "  emoji range", 0x0001F600, 0x0001F609
    ) if all or args.emojirange else None
