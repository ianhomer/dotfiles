#!/usr/bin/env bash

#
# Batching changes for git.
#
# Suitable only for git content repositories such as a digital garden and not
# code repositories where branches should branch names should be named with
# meaning.
#
# When I make changes to my digital garden I like to work in batches and then
# review the batch before merging. I tend to have one batch open at a time per
# device, and a batch tends to cover a days work. This allows me to collect my
# thoughts in a batch and use git to review the changes. It also allows me to
# jump between devices. This git commmand aims to make this easy for me.
#

$(shim) && . ${ME}/bin/i.sh

help() {
  cat << EOF

Batch git changes

  -e (e)nable batch completions
  -h this (h)elp
  -t use (t)ime in batch name
  -n explicit batch (n)ame

Create a new batch

  git batch

Complete a batch, first enable batch completions for a given repository

  git batch -e

And then

  git batch complete

EOF
}

OPTIND=1
while getopts "ahn:t" o; do case "$o" in
  a) git config core.allowbatchcompletions true ;;
  h) help && exit 0 ;;
  t) WITH_TIME="y" ;;
  n) BATCH_NAME=$OPTARG ;;
esac done
shift $((OPTIND-1))

COMMAND=$1

trunk=main

function newBatch {
  currentBranchName=`git rev-parse --abbrev-ref HEAD`
  if [[ "$currentBranchName" != "$trunk" ]] ; then
    log::error "Already on batch $currentBranchName"
  else
    log::info "Creating new batch"
    if [ -n "$BATCH_NAME" ] ; then
      batchName=$BATCH_NAME
    elif [ "$WITH_TIME" == "y" ] ; then
      batchName=`date +%Y%m%d%H%M`
    else
      batchName=`date +%Y%m%d`
    fi
    batchBranchName=batch/$batchName
    git ls-remote --exit-code --heads origin $batchBranchName
    if [ $? -eq 0 ] ; then
      log::error "Checking out existing remote batch $batchName"
      git fetch origin $batchBranchName
      git checkout $batchBranchName
    elif [ `git rev-parse --verify $batchBranchName 2>/dev/null` ] ; then
      log::error "Checking out existing local batch $batchName"
      git checkout $batchBranchName
      git branch --unset-upstream $batchBranchName
      git push
      git pullme
    else
      log::info "Creating new batch $batchName"
      # Pull latest trunk before branching
      git pull
      git checkout -b $batchBranchName
    fi
    git ls-remote --heads origin | grep "/batch/"
    [ $? -eq 0 ] && log::info "^ batches on remote listed above"
  fi
}

function completeBatch {
  if [[ "true" != `git config core.allowbatchcompletions` ]] ; then
      # Otherwise we have not explicit set that this repo can complete
      # batches.
      printf "∷ ◉ $current - set allowbatchcompletions with git batch -a to allow batch completions"
      return 128

  fi
  currentBranchName=`git rev-parse --abbrev-ref HEAD`
  if [[ "${currentBranchName}" != batch/* ]] ; then
    log::error "Current branch ${currentBranchName} is not a batch"
  else
    log::info "Completing batch ${currentBranchName}"
    if [[ `git status --porcelain` ]]; then
      # Check for conflict markers before proceeding
      git diff --check
      log::info "Commit uncommitted changes in batch"
      git commit -am "batch complete"
    fi
    git fetch origin $trunk:$trunk
    leftRight=$(git rev-list --count --left-right $currentBranchName...$trunk)
    left=$(echo $leftRight | awk '{print $1}')

    if [ $left -gt 0 ] ; then
      # Check if any merge conflicts
      log::info "Checking OK to merge"
      set +e
      git merge main --no-ff --no-commit
      if [ $? -ne 0 ] ; then
        log::error "Merge conflicts need to be resolved"
        log::info "Resolve conflicts and commit, or"
        log::info "    git merge --abort"
        return $?
      fi
      set -e
      # Squash merge onto trunk with auto commit message. If there
      # are comflicts then this will fail and the conflict should be resolved
      # manually.
      log::info "Merging batch into trunk"
      git checkout $trunk
      set +e
      git merge --squash $currentBranchName
      if [ $? -ne 0 ] ; then
          mergeReturnCode=$?
          git checkout $currentBranchName
          if [ $? -eq 0 ] ; then
            log::error "Cannot merge branch, please rebase manually from batch branch"
            log::info "    git rebase origin/main"
            log::info "    git rebase --continue"
            log::info "    git push"
            return $mergeReturnCode
          else
            log::error "Cannot merge branch, please resolve conflicts in trunk"
            return $mergeReturnCode
          fi
      fi
      set -e
      if [[ `git status --porcelain` ]]; then
          summary=`git diff --cached --shortstat | sed "s/ changed//"`
          git commit -m "${currentBranchName} ${summary}"
          git push
      fi

      if [ `git rev-parse --verify origin/${currentBranchName} 2>/dev/null` ] ; then
        # Auto delete local and remote branch. Note that local copy remains
        # and is useful for troubleshooting. Use git pruneme to clear up local
        # branches as needed.
        git push origin -d "${currentBranchName}"
      fi
    else
      log::info "No changes in batch"
      git checkout $trunk
      git pull
      git branch -d "${currentBranchName}"
    fi
  fi
}

if [[ -z "$COMMAND" ]] ; then
  newBatch
elif [[ "$COMMAND" == "complete" ]] ; then
  set -e
  completeBatch
else
  echo "Command $COMMAND" is not recognised
fi

