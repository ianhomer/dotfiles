#!/usr/bin/env bash

#
# Batching changes for git.
#
# Suitable only for git content repositories such as a digital garden and not
# code repositories where branches should branch names should be named with
# meaning.
#
# When I make changes to my digital garden I like to work in batches and then
# review the batch before merging. I tend to have one batch open at a time, and
# a batch tends to cover a days work. This allows me to collect my thoughts in a
# batch and use the PR process to review the changes. It also allows me to jump
# between devices. This git commmand aims to make this easy for me.
#

$(shim) && . ${ME}/i.sh

help() {
  cat << EOF

Batch git changes

  -e (e)nable batch completions
  -h this (h)elp
  -t use (t)ime in batch name
  -n explicit batch (n)ame

Create a new batch

  git batch

Complete a batch, first enable batch completions for a given repository

  git batch -e

And then 

  git batch complete

EOF
}

OPTIND=1
while getopts "hn:t" o; do case "$o" in
  h) help && exit 0 ;;
  t) WITH_TIME="y" ;;
  n) BATCH_NAME=$OPTARG ;;
esac done
shift $((OPTIND-1))

COMMAND=$1

trunk=main

function newBatch {
  currentBranchName=`git rev-parse --abbrev-ref HEAD`
  if [[ "$currentBranchName" != "$trunk" ]] ; then
    log::error "On $currentBranchName"
  else
    if [ -n "$BATCH_NAME" ] ; then
      batchName=$BATCH_NAME
    elif [ "$WITH_TIME" == "y" ] ; then
      batchName=`date +%Y%m%d%H%M`
    else
      batchName=`date +%Y%m%d`
    fi
    batchBranchName=batch/$batchName
    git ls-remote --exit-code --heads origin $batchBranchName
    if [ $? -eq 0 ] ; then
      log::error "Checking out existing remote batch $batchName"
      git checkout $batchBranchName
    elif [ `git rev-parse --verify $batchBranchName 2>/dev/null` ] ; then
      log::error "Checking out existing local batch $batchName"
      git checkout $batchBranchName
    else
      log::info "Creating new batch $batchName"
      git checkout -b $batchBranchName
    fi
  fi
  git ls-remote --heads origin | grep "/batch/"
}

function completeBatch {
  currentBranchName=`git rev-parse --abbrev-ref HEAD`
  if [[ "${currentBranchName}" != batch/* ]] ; then
    log::error "Current branch ${currentBranchName} is not a batch"
  else
    if [[ `git status --porcelain` ]]; then
      git commit -am "batch complete"
    fi
    # early push in case issues, however on success remote
    # branch will be removed
    git push
    # Sequash merge onto trunk with auto commit message. If there
    # are comflicts then this will fail and the conflict should be resolved 
    # manually
    git checkout $trunk
    git merge --squash $currentBranchName
    git commit -m "${currentBranchName}"
    git push
    # auto delete remote bracnh, not that local copy remains
    # and is useful for troubleshooting
    git push origin -d "${currentBranchName}"
  fi
}

if [[ -z "$COMMAND" ]] ; then
  newBatch
elif [[ "$COMMAND" == "complete" ]] ; then
  set -e
  completeBatch
else
  echo "Command $COMMAND" is not recognised
fi





