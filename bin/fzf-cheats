#!/usr/bin/env python3

#
# Generate cheats for streaming into fzf
#

import os
import re
import sys
import fileinput


def usage():
    scriptName = os.path.basename(__file__)
    print(f"{scriptName}")


COMMAND_CHAR = "⌘"
SHIFT_CHAR = "⇧"
CONTROL_CHAR = "⌃"
OPTION_CHAR = "⌥"
SPACE_CHAR = "␣"

lineFormat = (
    "{group}:\u001b[0m {command:12s} \u001b[33m{context:15s} \u001b[36m {definition:s}"
)

metas = []

group = "unknown"
application = "default"
context = "main"
mark = ""
command = "n/a"
definition = "definition"
lastWasCommand = 0

DEBUG = 0

commands = []


def printLine(meta):
    meta["command"] = transformCommand(meta["command"])
    print(lineFormat.format(**meta))


def debug(message):
    if DEBUG:
        print("DEBUG : " + message)


def hidden(s):
    return "\u001b[30m" + s + "\u001b[0m"


def transformCommand(command):
    return (
        command.replace("Cmd+", COMMAND_CHAR)
        .replace("Shift+", SHIFT_CHAR)
        .replace("Ctrl+", CONTROL_CHAR)
        .replace("Opt+", OPTION_CHAR)
        .replace("Alt+", OPTION_CHAR)
        .replace("space+", SPACE_CHAR)
    )


def parse(line):
    global group
    global application, context
    global command, definition, mark, lastWasCommand
    debug("line - " + line)
    # Heading
    match = re.search("^(#+) (.*)$", line)
    if match:
        debug("heading : " + match.group(1) + ":" + match.group(2))
        headingDepth = len(match.group(1))
        if headingDepth == 1:
            group = match.group(2)
        elif headingDepth == 2:
            application = match.group(2)
        else:
            context = match.group(2)
        lastWasCommand = 0
        return
    # Command and definition
    match = re.search("^[-|] `([^`]*)`\\s*[:|] ([^|]*)", line)
    if not match:
        match = re.search("^[-|] \\*\\*([^\\*]*)\\*\\*\\s*[:|] ([^|]*)", line)
    if match:
        printLine(
            {
                "group": group,
                "context": application + " " + context,
                "command": match.group(1),
                "definition": match.group(2),
            }
        )
    # Command
    match = re.search("^\\*\\*([^\\*]*)\\*\\*", line)
    if not match:
        match = re.search("^`([^`]*)`", line)
    if match:
        command = match.group(1)
        lastWasCommand = 1
        return
    definition = line
    # Definition
    match = re.search("^: ([^;:\\.]+).*$", line)
    if lastWasCommand and match:
        printLine(
            {
                "group": group,
                "context": application + " " + context,
                "command": command,
                "definition": match.group(1),
            }
        )
    lastWasCommand = 0


def main(argv):
    for line in fileinput.input():
        parse(line.rstrip())

    for meta in metas:
        printLine(meta)


if __name__ == "__main__":
    main(sys.argv[1:])
