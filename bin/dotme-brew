#!/usr/bin/env bash

# Install brew packages
#

set -e

SHOULD_RUN_ARGS=""
while getopts "af" o; do case "$o" in
  f) SHOULD_RUN_ARGS="${SHOULD_RUN_ARGS} -f" ;;
  a) ADMIN=y ;;
esac done

$(shim) && cd ${ME} && . bin/i.sh

BREW_DIR=${DOTFILES_DIR}/config/brew

if [[ "$ADMIN" != "y" ]] ; then
  should-run -m 14 $@ $0 $BREW_DIR/Brewfile || exit 0
fi

if is-silicon ; then
  brewCommand=/opt/homebrew/bin/brew
else
  # TBD
  brewCommand=/usr/local/bin/brew
fi

if ! is-executable $brewCommand ; then
  log:: "installing brew (sudo required)"
  /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
fi

if [[ ! -f ~/.zprofile ]] || ! grep -q "homebrew" ~/.zprofile ; then
  log:: "initialising ~/.zprofile"
  ${brewCommand} shellenv >> ~/.zprofile
  . ~/.zprofile
fi

adminFormula="adoptopenjdk8 adoptopenjdk11 java11 languagetool openjdk@11"
adminFormula="${adminFormula} dotnet-sdk5-0-200 powershell google-cloud-sdk"

installed=`brew list -1 --formula`

# Pin formula that need password to upgrade if not in admin mode
for formula in $adminFormula ; do
  if [[ "$ADMIN" == "y" ]] ; then
    log:: "unpinning $formula"
    brew unpin $formula &>/dev/null || log:: "not unpinned $formula"
  else
    if [[ "$installed" == *${formula}* ]] ; then
      log::trace "$formula installed => should be pinned"
      if [ $(brew list --pinned $formula | wc -l) == 0 ] ; then
        log:: "pinning $formula"
        brew pin $formula
      fi
    else
      log::trace "$formula not installed => not pinning"
    fi
  fi
done

log:: "updating brew"
# Use latest version of brew
brew update

log:: "upgrading brew"
# Upgrade any already installed formulae
brew upgrade
log:: "upgraded brew"

cd $DOTFILES_DIR/config/brew
brew bundle

if [[ "$ADMIN" == "y" ]] ; then
  log:: "installing admin packages"
  cd $DOTFILES_DIR/config/brew/admin
  brew bundle
fi

# (disabled) force pnpm overwrite, we'll always take an upgrade
# brew link --overwrite pnpm

alfredPid=$(pgrep Alfred || echo "")
if [[ -z "${alfredPid}" ]] ; then
  log:: "Starting Alfred"
  /usr/bin/open -a "Alfred 5"
else
  alfredAge=$(expr $(date +%s) - $(stat -f "%m" /Applications/Alfred\ 5.app))
  if [[ $alfredAge -lt 864000 ]] ; then
    log:: "Alfred recently updated, age ${alfredAge}s"
    # Restart Alfred - it might have updated, and it's quick to recycle, so until I
    # can be cleverer about restarting when updated ...
    osascript -e 'tell application "Alfred" to quit'
    sleep 1
    /usr/bin/open -a "Alfred 5" || echo "Cannot open Alfred"
  fi
fi

if [[ ! -d ~/.cache/vale ]] ; then
  vale sync || echo "failed to sync vale"
fi

should-run -fu $0
