#!/usr/bin/env python3

import argparse
import configparser
import os
import os.path
import subprocess
import re
import sys
from datetime import datetime
from datetime import date
from pathlib import Path
from subprocess import PIPE

home = str(Path.home())

config = configparser.ConfigParser()
config.read(str(Path.home()) + "/.config/dotme/shim.ini")
THINGS_DIR = config["DEFAULT"]["THINGS_DIR"]
MY_NOTES = config["DEFAULT"]["MY_NOTES"]
PURPLE = "\033[95m"
ORANGE = "\033[33m"
END = "\033[0m"


# - [ ] Todo
# - [x] Done
# - [ ] ABC . Backlog
# - [ ] ABC - Horizon
# - [ ] ABC ~ Alignment
# - [x] x Cancelled


def run():
    parser = argparse.ArgumentParser(description="todoer")
    parser.add_argument("do", nargs="*", help="do")
    parser.add_argument("-a", "--all", help="all dos", action="store_true")
    parser.add_argument("-c", "--context", help="all contexts", action="store_true")
    parser.add_argument("--days", type=int, help="days")
    args = parser.parse_args()

    if args.do and len(args.do) > 1:
        words = []

        # Scan words
        for word in args.do:
            words.append(word)
        # do to add
        do = " ".join(words)
        add(do)
        return

    if args.context:
        context()
        return

    # Repeat search until we exit (Ctrl-C)
    more = True
    while more:
        more = search(args)


def context():
    ag = subprocess.Popen(
        [
            "ag",
            "--nocolor",
            "--nobreak",
            "--nofilename",
            "\\- \\[ \\] [A-Z]{3}",
            THINGS_DIR,
        ],
        stdout=PIPE,
    )
    sed = subprocess.Popen(
        ["sed", "s/- \\[ \\] \\([A-Z]\\{3\\}\\) .*/\\1/g"],
        stdin=ag.stdout,
        stdout=PIPE,
    )
    result = subprocess.run(["sort", "-u"], stdin=sed.stdout, stdout=PIPE, text=True)
    for line in result.stdout.splitlines():
        print(line)
    return


def search(args):
    if args.all:
        if args.do:
            pattern = f"\\- \\[ \\] {args.do[0]}"
        else:
            pattern = "\\- \\[ \\]"
    elif args.do:
        pattern = f"\\- \\[ \\] {args.do[0]} [^\\.\\-~]"
    else:
        # By default ignore todos
        pattern = "\\- \\[ \\](?! ([A-Z]{3} )?[\\.\\-~])"

    ag = [
        "ag",
        "--noheading",
        "--nonumbers",
        "--nocolor",
        "--nobreak",
        pattern,
        THINGS_DIR,
    ]
    result = subprocess.run(ag, stdout=PIPE, text=True)

    lines = result.stdout.splitlines()
    encoding = sys.getdefaultencoding()
    days = args.days or (365 if args.all else 7)
    dos = []
    for line in lines:
        do = line.replace("- [ ] ", "")
        match = re.search(
            "^([^:]*):((?:[A-Z]{3}(?=\\s))?)\\s*((?:[0-9]+(?=\\s)\\s)?)\\s*(.*)$",
            do,
        )
        if match:
            include = True
            doFile = match.group(1)
            doContext = match.group(2)
            doDate = match.group(3)
            # Filter on date
            if doDate != "":
                doDateMatch = re.search("([0-9]{4})([0-9]{2})([0-9]*)", doDate)
                if doDateMatch:
                    d0 = date(int(doDateMatch.group(1)),
                              int(doDateMatch.group(2)),
                              int(doDateMatch.group(3) or 1))
                    d1 = date.today()
                    include = (d0 - d1).days <= days
                    print(include)
            subject = match.group(4)
            if include:
                dos.append(
                    f"{PURPLE}{doContext}{END}\t"
                    + f"{ORANGE}{doDate}{END}{subject}\t{doFile}\n"
                )
        else:
            # Invalid do
            print(f"BADDO : {do}")
    dos.sort()
    fzf = subprocess.Popen(
        [
            "fzf",
            "--ansi",
            "+m",
            "-d",
            "\t",
            "--with-nth",
            "1,2",
            "--tabstop",
            "4",
            "--tiebreak",
            "begin",
        ],
        stdin=PIPE,
        stdout=PIPE,
        stderr=None,
    )
    fzfIn = fzf.stdin
    fzfIn.write(f"\t(today)\t{getTodayLog()}\n".encode(encoding))
    for do in dos:
        fzfIn.write(do.encode(encoding))

    fzfIn.flush()
    fzfIn.close()
    fzf.wait()
    stdout = fzf.stdout
    output = stdout.read().decode(encoding)
    match = re.search("^([^\t]*)\t([^\t]*)\t(.*)$", output)
    if match:
        file = match.group(3)
        subprocess.call(["nvim", file], env={**os.environ, "VIM_KNOB": "5"})
        return True
    else:
        print(output)
    return False


def getTodayLog(now=datetime.now()):
    now = datetime.now()
    today = now.strftime("%m%d")
    return f"{THINGS_DIR}/{MY_NOTES}/stream/{today}.md"


# Add a do
def add(do):
    match = re.search("^((?:[A-Za-z]{0,3}(?=\\s))?)\\s*(.*)$", do)
    # MEM (Memento https://www.imdb.com/title/tt0209144/)
    doContext = match.group(1).upper() or "MEM"
    subject = match.group(2)

    now = datetime.now()
    todayLog = getTodayLog(now)
    if not os.path.isfile(todayLog):
        Path(todayLog).touch()
    with open(todayLog, "r+") as file:
        file.seek(0)
        lines = file.readlines()
        length = len(lines)
        if length == 0:
            # Add date heading
            todayLong = now.strftime("%a %d %b %Y").upper()
            lines.append(f"# {todayLong}\n\n")
        elif length == 1:
            # Guard to make sure todos don't crash heading of manually created
            # file
            lines.append("\n")

        lines.insert(2, f"- [ ] {doContext} {subject}\n")
        file.seek(0)
        file.writelines(lines)


run()
