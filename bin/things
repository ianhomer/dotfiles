#!/usr/bin/env python3

import argparse
import os
import subprocess
import configparser
import re
from pathlib import Path
from subprocess import PIPE
from lib import thingity


config = configparser.ConfigParser()
config.read(str(Path.home()) + "/.config/dotme/shim.ini")
THINGS_DIR = config["DEFAULT"]["THINGS_DIR"]


def run():
    parser = argparse.ArgumentParser(description="things")
    parser.add_argument("thing", nargs="*", help="thing")
    parser.add_argument("-s", "--search", help="find things", action="store_true")
    parser.add_argument("-r", "--recent", help="recent things", action="store_true")
    parser.add_argument("--synk", help="synk things", action="store_true")
    # Just sync my notes
    parser.add_argument("-m", "--my", help="synk my things", action="store_true")
    parser.add_argument("-o", "--open", help="open my things", action="store_true")

    args = parser.parse_args()

    if thingity.synk(args.synk, args.my):
        return

    if args.open:
        return open()

    if args.search:
        return search(args)

    more = True
    while more:
        more = recent(args)


def open():
    subprocess.run(["nvim"], env={**os.environ, "VIM_KNOB": "4"}, cwd=THINGS_DIR)


class Fzf:
    # Command Fzf command
    def __init__(self):
        self.cmd = ["fzf", "--height", "100%", "--ansi", "-d", ":", "--color", "dark"]
        self.parts = []
        self.defaultCommand = "true"
        self.filenameMatcher = ""
        self.binds = [
            "ctrl-f:reload(fd --changed-within 2weeks md "
            + "--exec stat -f '%m %N' {} | sort -r)",
            "ctrl-s:reload(rg -i --glob '**/*.md' {q} || true)",
        ]

    def run(self):
        cmd = self.cmd + self.parts
        if len(self.binds) > 0:
            cmd += ["--bind", ",".join(self.binds)]
        process = subprocess.run(
            cmd,
            stdout=PIPE,
            text=True,
            stderr=None,
            env={**os.environ, "FZF_DEFAULT_COMMAND": self.defaultCommand},
            cwd=THINGS_DIR,
        )
        lines = process.stdout.splitlines()
        selected = []
        for line in lines:
            match = re.search(self.filenameMatcher, line)
            if match:
                selected.append(match.group(1))

        if len(selected) > 0:
            subprocess.call(
                ["nvim", selected[0], "+:$"],
                env={**os.environ, "VIM_KNOB": "5"},
                cwd=THINGS_DIR,
            )
            return True
        return False


def recent(args):
    fzf = Fzf()
    fzf.parts = [
        "--with-nth",
        "2..",
        "--preview",
        "bat --style=header --color=always (echo {} | cut -d: -f2)",
    ]
    period = args.thing[0] if args.thing else "1week"
    fzf.defaultCommand = (
        f"fd --changed-within {period} md " + "--exec stat -f '%m:%N' {} | sort -r"
    )
    fzf.filenameMatcher = "^[^ ]* (.*)$"
    return fzf.run()


def search(args):
    fzf = Fzf()
    fzf.parts = [
        "--with-nth",
        "2..",
        "--preview",
        "bat --style=header --color=always (echo {} | cut -d: -f1)",
    ]
    rgPrefix = "rg -i --glob '**/*.md'"
    if args.thing and len(args.thing) > 0:
        words = []

        # Scan words
        for word in args.thing:
            words.append(word)
        # thing to search
        pattern = " ".join(words)
        fzf.defaultCommand = f"{rgPrefix} '{pattern}' || true"
    else:
        fzf.parts += ["--phony"]
        fzf.binds = ["change:reload:" + rgPrefix + " {q} || true"]

    fzf.filenameMatcher = "^([^:]*):.*$"
    return fzf.run()


run()
