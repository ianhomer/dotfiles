#!/usr/bin/env python3

import argparse
import os
import subprocess
import configparser
import re
import time
from pathlib import Path
from subprocess import PIPE


config = configparser.ConfigParser()
config.read(str(Path.home()) + "/.config/dotme/shim.ini")
THINGS_DIR = config["DEFAULT"]["THINGS_DIR"]


def run():
    parser = argparse.ArgumentParser(description="things")
    parser.add_argument("thing", nargs="*", help="thing")
    parser.add_argument("-s", "--synk", help="synk things", action="store_true")
    parser.add_argument("--foreground", help="run in foreground", action="store_true")

    args = parser.parse_args()

    if args.synk:
        sync(args)
        return

    more = True
    while more:
        more = search(args)


def sync(args):
    if args.foreground:
        subprocess.run(["git", "synk"], cwd=THINGS_DIR)
        time.sleep(3)
    else:
        subprocess.run(
            ["tmux", "split-window", "-l", "5", "-v", "things -s --foreground"]
        )


def search(args):
    fzf = [
        "fzf",
        "--ansi",
        "-d",
        ":",
        "--with-nth",
        "2",
        "--preview",
        "bat --style=header --color=always (echo {} | cut -d: -f1)",
        "--color",
        "dark",
    ]
    rgPrefix = "rg -i --glob '**/*.md'"
    if args.thing and len(args.thing) > 0:
        words = []

        # Scan words
        for word in args.thing:
            words.append(word)
        # thing to search
        pattern = " ".join(words)
        fzfDefaultCommand = f"{rgPrefix} '{pattern}' || true"
    else:
        fzfDefaultCommand = "true"
        fzf.extend(["--phony", "--bind", "change:reload:" + rgPrefix + " {q} || true"])

    process = subprocess.run(
        fzf,
        stdout=PIPE,
        text=True,
        stderr=None,
        env={**os.environ, "FZF_DEFAULT_COMMAND": fzfDefaultCommand},
    )

    lines = process.stdout.splitlines()
    selected = []
    for line in lines:
        match = re.search("^([^:]*):.*$", line)
        if match:
            selected.append(match.group(1))

    if len(selected) > 0:
        print(f"opening {selected[0]}")
        subprocess.call(["nvim", selected[0]], env={**os.environ, "VIM_KNOB": "5"})
        return True
    return False


run()
