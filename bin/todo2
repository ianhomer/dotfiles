#!/usr/bin/env python3

import argparse
import configparser
import os
import os.path
import subprocess
import re
import sys
from datetime import datetime
from pathlib import Path
home = str(Path.home())

config = configparser.ConfigParser()
config.read(str(Path.home()) + "/.config/dotme/shim.ini")
THINGS_DIR = config['DEFAULT']['THINGS_DIR']

PURPLE = '\033[95m'
BOLD = '\033[1m'
END = '\033[0m'

def run():
    parser = argparse.ArgumentParser(description='todoer')
    parser.add_argument('do', nargs='*', help='do')
    parser.add_argument('--group', action='store_true', help='group contexts')
    parser.add_argument('--stdout', action='store_true',
                        help='send to stdout not fzf')
    args = parser.parse_args()

    if args.do:
        words = []

        # Scan words
        for word in args.do:
            words.append(word)
        # do to add
        do = " ".join(words)
        add(do)

    pattern = "\\- \\[ \\](?! [\\.\\-~\\^])"
    result = subprocess.run(["ag", "--nofilename", "--nocolor", "--nobreak",
                             pattern, THINGS_DIR],
                            stdout=subprocess.PIPE, text=True)

    lines = result.stdout.splitlines()
    lines.sort()
    columns = os.get_terminal_size().columns
    context = ""
    encoding = sys.getdefaultencoding()
    if not args.stdout:
        fzf = subprocess.Popen("fzf",
                               stdin=subprocess.PIPE,
                               stdout=subprocess.PIPE,
                               stderr=None)
        fzfIn = fzf.stdin
    for line in lines:
        do = line.replace("- [ ] ", "")
        match = re.search("^([A-Z]{0,3})\\s*(.*)$", do)
        if match:
            doContext = match.group(1)
            if args.stdout:
                styledContext = f"{BOLD}{PURPLE}{doContext}{END}"
                lengthOfHiddenStyle = len(styledContext) - len(doContext)
            subject = match.group(2)
            if args.group:
                if (context != doContext):
                    context = doContext
                    print("\n" + styledContext)
                if args.stdout:
                    styledLine = subject
            else:
                if args.stdout:
                    styledLine = styledContext + " " + subject
            if args.stdout:
                print(styledLine[:columns + lengthOfHiddenStyle])
            else:
                fzfIn.write(f"{doContext} {subject}\n".encode(encoding))
                fzfIn.flush()
        else:
            # Invalid do
            print(f"BADDO : {do}")
    if not args.stdout:
        fzf.wait()


# Add a do
def add(do):
    now = datetime.now()
    today = now.strftime("%m%d")
    todayLog = f"{THINGS_DIR}/my-notes/stream/{today}.md"
    if not os.path.isfile(todayLog):
        Path(todayLog).touch()
    with open(todayLog, 'r+') as file:
        file.seek(0)
        lines = file.readlines()
        length = len(lines)
        if length == 0:
            # Add date heading
            todayLong = now.strftime("%a %m %b %Y").upper()
            lines.append(f"# {todayLong}\n\n")
        elif length == 1:
            # Guard to make sure todos don't crash heading of manually created
            # file
            lines.append("\n")

        lines.append(f"- [ ] {do}\n")
        file.seek(0)
        file.writelines(lines)


run()
