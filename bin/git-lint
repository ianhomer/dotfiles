#!/usr/bin/env bash

#
# Set up repository for a specific user context. This covers alternative
# remote orgin URLs for different user contexts, ensures SSH used,
# resets SSH keys ... any things I tend do to get a repository hooked up
# right.
#

$(shim) && . ${ME}/i.sh

if git rev-parse --is-inside-work-tree 2>&1 >/dev/null ; then
  INSIDE_GIT_REPOSITORY=y
fi

#
# If "personal" host is set up in .ssh config them that's the
# default context, otherwise the default context is empty.
# Normally I'll have a personal context set up on alternative machines,
# however on personal machines then I'll only have personal set up.
#
if [[ $(grep "Host" ~/.ssh/config | grep "personal" | wc -l) -gt 0 ]]
then
  context="personal"
else
  context=""
fi

OPTIND=1
while getopts "c:xv" o; do case "$o" in
  c) context=$OPTARG ;; # context of repository
  x) NOCONTEXT="y" ;;
  v) verbose="y" ;;
esac done

shift $((OPTIND-1))
[ "${1:-}" = "--" ] && shift
action=${1:-show}

function setMyGitUrl {
  currentRemoteUrl=$(git config --get remote.origin.url)
  case $currentRemoteUrl in
    *github.com*)    host="github.com"    ;;
    *bitbucket.org*) host="bitbucket.org" ;;
    *)
      log:: NOK remote-url URL not recognised
      if [[ -z "$currentRemoteUrl" ]] ; then
        log:: NOK remote-url is empty
      else
        log:: IS remote-url $currentRemoteUrl
      fi
      return 1
      ;;
  esac

  [[ -n "${context}" ]] && postFix="-${context}"

  if [[ "github.com" == "${host}" ]] ; then
    # Always use SSH for github
    myRemoteUrl=${currentRemoteUrl/https:\/\/github\.com\//git@github.com:}
  else
    myRemoteUrl=${currentRemoteUrl}
  fi

  if [[ "$NOCONTEXT" == "y" ]] ; then
    # Desired state is without context
    myRemoteUrl=${myRemoteUrl/-*:/:}
  else
    myRemoteUrl=${myRemoteUrl/${host}:/${host}${postFix}:}
  fi

  if [ ${currentRemoteUrl} != ${myRemoteUrl} ] ; then
    echo "current remote   $currentRemoteUrl"
    echo "desired remote   ${myRemoteUrl}"
    if [[ ${action} == "context" ]] ; then
      git remote set-url origin $myRemoteUrl
      echo "changed remote to "$(git config --get remote.origin.url)
    else
      echo "change remote with \"context\" action"
    fi
  else
    [[ "${verbose}" == "y" ]] && echo "current remote   $currentRemoteUrl"
    log:: AOK remote $currentRemoteUrl
  fi
}

function fixMain() {
  branch=$(git rev-parse --abbrev-ref HEAD)
  if [[ "$branch" == "master" ]] ; then
    git fetch --prune
    if ! git show-ref --quiet --verify -- "refs/remotes/origin/master" ; then
      if git show-ref --quiet --verify -- "refs/remotes/origin/main" ; then
        if [[ "${action}" == "main" ]] ; then
          git checkout main
        else
          echo "Repository uses master not main - use \"main\" action to fix"
        fi
      else
        echo "No master or main in remote"
      fi
    else
      log:: NOK master prefer main
    fi
  elif [[ "$branch" == "main" ]] ; then
    log:: AOK $branch
  fi
}

function fixUpstream() {
  upstream=$(git rev-parse --abbrev-ref @{upstream})
  current=$(git rev-parse --abbrev-ref HEAD)
  if [[ "$upstream" != "origin/$current" ]] ; then
    git set-upstream
  else
    log:: AOK upstream $current
  fi
}

function fixWho() {
  if [[ "${INSIDE_GIT_REPOSITORY}" == "y" ]] ; then
    gitUserEmail=$(git config user.email)
    gitUserName=$(git config user.name)
    log:: IS "local" $gitUserEmail $gitUserName
  fi 
  gitGlobalUserEmail=$(git config --global user.email)
  gitGlobalUserName=$(git config --global user.name)
  log:: IS "global" $gitGlobalUserEmail $gitGlobalUserName
}


[[ -n "${verbose}" ]] && echo "deleting identites from SSH agent"
ssh-add -q -D
[[ -n "${verbose}" ]] && ssh-add -l

if [[ "${INSIDE_GIT_REPOSITORY}" == "y" ]] ; then
  setMyGitUrl || log::exit "Cannot process git URL"
  fixMain
  fixUpstream
else
  log:: "not in a git repository"
fi
fixWho

# Clear authentication agent

exit 0
