#!/bin/bash

#
# Set up repository for a specific user context. This covers alternative
# remote orgin URLs for different user contexts, ensures SSH used,
# resets SSH keys ... any things I tend do to get a repository hooked up
# right.
#

#
# If "personal" host is set up in .ssh config them that's the
# default context, otherwise the default context is empty.
# Normally I'll have a personal context set up on alternative machines,
# however on personal machines then I'll only have personal set up.
#
if [[ $(grep "Host" ~/.ssh/config | grep "personal" | wc -l) -gt 0 ]]
then
  defaultContext="personal"
else
  defaultContext=""
fi

context=${1:-personal}

echo "Context : $context"

git remote show origin

function setMyGitUrl {
  currentRemoteUrl=$(git config --get remote.origin.url)
  echo "... current remote URL = $currentRemoteUrl"
  case $currentRemoteUrl in
    *github.com*)
      host="github.com"
      ;;
    *bitbucket.org*)
      host="bitbucket.org"
      ;;
    *)
      echo "Host for current remote URL not recognised"
      exit 1
      ;;
  esac

  if [[ -z "${context}" ]] ; then
    postFix="-${context}"
  else 
    postFix=""
  fi

  if [[ "github.com" == "${host}" ]] ; then
    # Always use SSH for github
    myRemoteUrl=${currentRemoteUrl/https:\/\/github\.com\//git@github.com:}
  else
    myRemoteUrl=${currentRemoteUrl}
  fi
  myRemoteUrl=${myRemoteUrl/${host}/${host}${postFix}}

  echo "... my remote URL ${myRemoteUrl}"

  if [ ${currentRemoteUrl} != ${myRemoteUrl} ] ; then
    git remote set-url origin $myRemoteUrl
    echo "Changed repository remote URL to "$(git config --get remote.origin.url)
  else
    echo "Current repository already is using my URL"
  fi
}

setMyGitUrl

