#!/usr/bin/env bash
#
# Prepare my environment and link dotfiles into place.
#
# Files in the dotfiles directory are linked into home directory with stow. The
# files are store in a directory for each tool. The result of the stowing is
# that all the files in the dotfiles directory have a corresponding link from
# the home directory to the master version in this dotfiles directory. All
# updates to the dotfiles are reflected when the dotfiles repository is updated.
#
# This process also installs a collection of tools that are useful. This process
# is for macOS only.
#

SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null 2>&1 && pwd )"
REPOSITORY_DIR="$( cd "$SCRIPT_DIR" ; cd .. && pwd )"
DOTFILES_DIR="${REPOSITORY_DIR}/dotfiles"

PATH=${SCRIPT_DIR}:${PATH}
VERBOSE=0
DRY=0

#
# Backup file before stowing.
#
backup() {
  file=$1
  if [ -f $HOME/$file -a ! -h $HOME/$file ] ; then
    echo "... backing up $HOME/$file"
    [ $DRY -eq 0 ] && mv $HOME/$file{,.bak}
  elif [ $VERBOSE -eq 1 ] ; then
    if [ ! -f $HOME/$file ] ; then
      echo "... not backing up $HOME/$file since it doesn't exist"
    else
      echo "... not backing up $HOME/$file since it is already stowed, i.e. a link"
    fi
  fi
}

#
# Restore file after unstowing.
#
restore() {
  file=$1
  if [ -f $HOME/$file.bak ] ; then
    echo "... restoring $HOME/$file"
    [ $DRY -eq 0 ] && mv $HOME/$file.bak $HOME/${file%%.bak}
  elif [ $VERBOSE -eq 1 ] ; then
    echo "... not restoring $HOME/$file.bak since it doesn't exist"
  fi
}

#
# Compile resources. Currently this is just the man files.
#
command_compile() {
  echo "... Creating man files"
  manDir=~/.dotfiles/bin/man/man1
  [ ! -d $manDir ] && mkdir $manDir
  manFile=${manDir}/dotme.1

  pandoc                        \
    ~/.dotfiles/bin/dotme.md    \
    ~/.dotfiles/README.md       \
    ~/.dotfiles/CHEATSHEET.md   \
    ~/.dotfiles/TODO.md         \
    -s -t man -o $manFile

  #install bin/man/dotme.1 /Users/ian/.dotfiles/bin/man/man1/
  #ln -fs ~/.dotfiles/tmp/dotme.1 /usr/local/share/man/man1
}

#
# View the man files on the fly
#
command_man() {
  pandoc -s                     \
    ~/.dotfiles/bin/dotme.md    \
    ~/.dotfiles/README.md       \
    ~/.dotfiles/CHEATSHEET.md   \
    ~/.dotfiles/TODO.md         \
    -t man README.md | groff -T utf8 -man | less
}

command_help() {
  man dotme
}

#
# Main entry point for installing dotfiles, and more, for a system.
#
command_install() {
  echo "Installing dotfiles ..."
  [ $VERBOSE -eq 1 ] && echo "... DOTFILES_DIR = ${DOTFILES_DIR}"
  command_pull
  command_brew
  [ $DRY -eq 0 ] && setup-osx
  [ $DRY -eq 0 ] && install-omf-packages
  [ $DRY -eq 0 ] && install-pip-packages
  [ $DRY -eq 0 ] && install-vim-packages
  [ $DRY -eq 0 ] && install-tmux-packages
  [ $DRY -eq 0 ] && install-node-packages
  command_stow
  command_clean
  echo "... dotfiles installed and AOK"
}

#
# Pull latest version of dotfiles
#
command_pull() {
  echo "... pulling latest version of dotfiles"
  cd $REPOSITORY_DIR
  [ $DRY -eq 0 ] && git pull
}

command_brew() {
  [ $DRY -eq 0 ] && install-brew-packages
}

# Just stow dotfiles, quicker than a full install.
command_stow() {
  echo "... stowing dotfiles"
  cd $DOTFILES_DIR
  for DIR in `ls -d */` ; do
    cd $DOTFILES_DIR/$DIR
    for FILE in `find . -type f -print` ; do
      [ $DRY -eq 0 ] && backup $FILE
    done
    [ $VERBOSE -eq 1 ] && echo "... stowing $DIR"
    # Copy directory structure so that stow links files NOT directories
    find . -mindepth 1 -type d -exec mkdir -p $HOME/{} \;
    [ $DRY -eq 0 ] && stow -v --ignore=.swp --ignore=.bak -t $HOME .
    [ $DRY -eq 1 ] && stow --simulate -v --ignore=.swp --ignore=.bak -t $HOME .
  done
}

# Just update system, assuming it's already been installed.
command_update() {
  echo "Updating system"
  cd $REPOSITORY_DIR
  git pull
  brew update
  brew upgrade
  npm update -g
}

# Housekeeping and keeping things clean.
command_clean() {
  echo "Cleaning up caches"
  brew cleanup
}

# Unistall dotfiles. Note that this does not (at this time), unstill brew packages.
command_uninstall() {
  echo "Uninstalling dotfiles ..."
  command_unstow
  echo "... uninstalled"
}

# Unstow dotfiles.
command_unstow() {
  echo "... unstowing files"
  cd $DOTFILES_DIR
  for DIR in `ls -d */` ; do
    cd $DOTFILES_DIR/$DIR
    [ $DRY -eq 0 ] && stow -v --delete -t $HOME .
    for FILE in `find . -type f -print` ; do
      restore $FILE
    done
  done
}


OPTIND=1         # Reset in case getopts has been used previously in the shell.

# Initialize our own variables:
VERBOSE=0

while getopts "h?vd" opt; do
  case "$opt" in
  h|\?)
    command_help
    exit 0
    ;;
  d) DRY=1
    ;;
  v) VERBOSE=1
    ;;
  esac
done

shift $((OPTIND-1))

[ "${1:-}" = "--" ] && shift

COMMAND=${@:-install}

command_${COMMAND} $@
if [ $? = 127 ]; then
  echo "'$COMMAND_NAME' is not a known command or has errors." >&2
  usage
  exit 1
fi
