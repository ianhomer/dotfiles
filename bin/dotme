#!/usr/bin/env bash

SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null 2>&1 && pwd )"
REPOSITORY_DIR="$( cd "$SCRIPT_DIR" ; cd .. && pwd )"
DOTFILES_DIR="${REPOSITORY_DIR}/dotfiles"

PATH=${SCRIPT_DIR}:${PATH}
VERBOSE=0
DRY=0

# Backup file before stowing
backup() {
  file=$1
  if [ -f $HOME/$file -a ! -h $HOME/$file ] ; then 
    echo "... backing up $HOME/$file"
    [ $DRY -eq 0 ] && mv $HOME/$file{,.bak} 
  elif [ $VERBOSE -eq 1 ] ; then
    if [ ! -f $HOME/$file ] ; then
      echo "... not backing up $HOME/$file since it doesn't exist"
    else
      echo "... not backing up $HOME/$file since it is already stowed, i.e. a link"
    fi
  fi
}

# Restore file after unstowing
restore() {
  file=$1
  if [ -f $HOME/$file.bak ] ; then 
    echo "... restoring $HOME/$file"
    [ $DRY -eq 0 ] && mv $HOME/$file.bak $HOME/${file%%.bak} 
  elif [ $VERBOSE -eq 1 ] ; then
    echo "... not restoring $HOME/$file.bak since it doesn't exist"
  fi
}

command_install() {
  echo "Installing dotfiles ..."
  [ $VERBOSE -eq 1 ] && echo "... DOTFILES_DIR = ${DOTFILES_DIR}"
  cd $REPOSITORY_DIR
  [ $DRY -eq 0 ] && git pull
  [ $DRY -eq 0 ] && install-brew-packages
  command_stow
  echo "... installed"
}

command_stow() {
  echo "... stowing dotfiles"
  cd $DOTFILES_DIR
  for DIR in `ls -d */` ; do
    cd $DOTFILES_DIR/$DIR
    for FILE in `find . -type f -print` ; do 
      backup $FILE
    done
    [ $VERBOSE -eq 1 ] && echo "... stowing $DIR"
    [ $DRY -eq 0 ] && stow -v -t $HOME .
  done
}

command_update() {
  echo "Updating system"
  cd $REPOSITORY_DIR
  git pull
  brew update
  brew upgrade
  npm update -g
}

command_clean() {
  echo "Cleaning up caches"
  brew cleanup
}

command_uninstall() {
  echo "Uninstalling dotfiles ..."
  command_unstow
  echo "... uninstalled"
}

command_unstow() {
  echo "... unstowing files"
  cd $DOTFILES_DIR
  for DIR in `ls -d */` ; do
    cd $DOTFILES_DIR/$DIR
    [ $DRY -eq 0 ] && stow -v --delete -t $HOME .
    for FILE in `find . -type f -print` ; do
      restore $FILE
    done 
  done
}


OPTIND=1         # Reset in case getopts has been used previously in the shell.

# Initialize our own variables:
VERBOSE=0

usage() {
  cat <<EOF
script usage: 
  
  $(basename $0) [-hvd] command

where command is one of:

* clean - clean up caches
* install (default)
* stow
* uninstall
* unstow
* update

EOF
}

while getopts "h?vd" opt; do
  case "$opt" in
  h|\?)
    usage
    exit 0
    ;;
  d) DRY=1
    ;;
  v) VERBOSE=1
    ;;
  esac
done

shift $((OPTIND-1))

[ "${1:-}" = "--" ] && shift

COMMAND=${@:-install}

command_${COMMAND} $@
if [ $? = 127 ]; then
  echo "'$COMMAND_NAME' is not a known command or has errors." >&2
  usage
  exit 1
fi

