#!/usr/bin/env bash

SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null 2>&1 && pwd )"
DOTFILES_DIR="$( cd "$SCRIPT_DIR" ; cd .. && pwd )"
PATH=${SCRIPT_DIR}:${PATH}
VERBOSE=0

command_install() {
  echo "Installing dotfiles ..."
  [ $VERBOSE -eq 1 ] && echo "... DOTFILES_DIR = ${DOTFILES_DIR}"
  cd $DOTFILES_DIR
  git pull
  install-brew-packages
  for FILE in `ls -A dotfiles` ; do 
    if [ -f $HOME/$FILE -a ! -h $HOME/$FILE ] ; then 
      echo "... backing up $FILE"
      mv $HOME/$FILE{,.bak} 
    fi
  done
  stow -v -t $HOME dotfiles
  echo "... installed"
}

command_update() {
  echo "Updating system"
  cd $DOTFILES_DIR
  git pull
  brew update
  brew upgrade
  npm update -g
}

command_clean() {
  echo "Cleaning up caches"
  brew cleanup
}

command_uninstall() {
  echo "Uninstalling dotfiles ..."
  stow -v --delete -t $HOME dotfiles
  for FILE in `ls -A dotfiles` ; do 
    if [ -f $HOME/$FILE.bak ] ; then 
      echo "... restoring $FILE"
      mv $HOME/$FILE.bak $HOME/${FILE%%.bak} 
    fi
  done
  echo "... uninstalled"
}

OPTIND=1         # Reset in case getopts has been used previously in the shell.

# Initialize our own variables:
VERBOSE=0

usage() {
  cat <<EOF
script usage: 
  
  $(basename $0) [-h] command

where command is one of:

* install (default)
* update
* clean - clean up caches
* uninstall

EOF
}

while getopts "h?vf:" opt; do
  case "$opt" in
  h|\?)
    usage
    exit 0
    ;;
  v) VERBOSE=1
    ;;
  esac
done

shift $((OPTIND-1))

[ "${1:-}" = "--" ] && shift

COMMAND=${@:-install}

command_${COMMAND} $@
if [ $? = 127 ]; then
  echo "'$COMMAND_NAME' is not a known command or has errors." >&2
  usage
  exit 1
fi

