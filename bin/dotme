#!/usr/bin/env bash
#
# Prepare my environment and link dotfiles into place.
#
# Files in the dotfiles directory are linked into home directory with stow. The
# files are store in a directory for each tool. The result of the stowing is
# that all the files in the dotfiles directory have a corresponding link from
# the home directory to the master version in this dotfiles directory. All
# updates to the dotfiles are reflected when the dotfiles repository is updated.
#
# This process also installs a collection of tools that are useful. This process
# is for macOS only.
#

SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null 2>&1 && pwd )"
REPOSITORY_DIR="$( cd "$SCRIPT_DIR" ; cd .. && pwd )"
DOTFILES_DIR="${REPOSITORY_DIR}/dotfiles"

PATH=${SCRIPT_DIR}:${PATH}
VERBOSE=0
DRY=0
QUICK=0

#
# Backup file before stowing.
#
backup() {
  file=$1
  if [ -f $HOME/$file -a ! -h $HOME/$file ] ; then
    echo "... backing up $HOME/$file"
    [ $DRY -eq 0 ] && mv $HOME/$file{,.bak}
  elif [ $VERBOSE -eq 1 ] ; then
    if [ ! -f $HOME/$file ] ; then
      echo "... not backing up $HOME/$file since it doesn't exist"
    else
      echo "... not backing up $HOME/$file since it is already stowed, i.e. a link"
    fi
  fi
}

#
# Restore file after unstowing.
#
restore() {
  file=$1
  if [ -f $HOME/$file.bak ] ; then
    echo "... restoring $HOME/$file"
    [ $DRY -eq 0 ] && mv $HOME/$file.bak $HOME/${file%%.bak}
  elif [ $VERBOSE -eq 1 ] ; then
    echo "... not restoring $HOME/$file.bak since it doesn't exist"
  fi
}

docfiles() {
  DOCS="bin/dotme.md README.md docs/cheats/* CHEATSHEET.md TODO.md"
  for doc in $DOCS ; do
    cat ~/.dotfiles/${doc}
    # Empty line between markdown files so that first title not lost
    echo
  done
}


#
# Compile resources. Currently this is just the man files.
#
command_compile() {
  echo "... Creating man files"
  manDir=~/.dotfiles/bin/man/man1
  [ ! -d $manDir ] && mkdir $manDir
  manFile=${manDir}/dotme.1

  docfiles | pandoc -s -t man -o $manFile
}

#
# View the man files on the fly
#
command_man() {
  docfiles | pandoc -s -t man | groff -T utf8 -man | less
}

command_pdf() {
  outfile="${TMPDIR}/dotme.pdf"
  docfiles | pandoc -s -o $outfile
  open $outfile
}

#
# View the compiled man pages
#
command_help() {
  man dotme
}

#
# Main entry point for installing dotfiles, and more, for a system.
#
command_install() {
  printf "\e[36mInstalling dotfiles\e[0m\n"
  [ $VERBOSE -eq 1 ] && echo "... DOTFILES_DIR = ${DOTFILES_DIR}"
  command_pull
  [ $QUICK -eq 0 ] && command_packages
  command_stow
  [ $DRY -eq 0 ] && [ $QUICK -eq 0 ] && is-macos && dotme-osx-defaults
  [ $DRY -eq 0 ] && [ $QUICK -eq 0 ] && dotme-omf
  [ $DRY -eq 0 ] && [ $QUICK -eq 0 ] && dotme-pip
  [ $DRY -eq 0 ] && [ $QUICK -eq 0 ] && dotme-gem
  [ $DRY -eq 0 ] && dotme-vim
  [ $DRY -eq 0 ] && dotme-tmux
  [ $DRY -eq 0 ] && [ $QUICK -eq 0 ] && dotme-node
  [ $DRY -eq 0 ] && [ $QUICK -eq 0 ] && dotme-jenv
  [ $DRY -eq 0 ] && dotme-fish
  [ $DRY -eq 0 ] && dotme-fisher
  [ $DRY -eq 0 ] && dotme-gitme
  [ $QUICK -eq 0 ] && command_clean
  printf "\e[36mdotfiles installed and \e[1mAOK\e[0m\n"
}

#
# Pull latest version of dotfiles
#
command_pull() {
  printf "\e[36mpulling latest version of dotfiles\e[0m\n"
  cd $REPOSITORY_DIR
  printf "\e[35m"
  [ $DRY -eq 0 ] && git pull
  printf "\e[0m"
}

command_packages() {
  if [[ $DRY -eq 0 ]] ; then
    if is-macos ; then
      dotme-brew
    elif has-pacman ; then
      has-pacman
    fi
  fi
}

# Just stow dotfiles, quicker than a full install.
command_stow() {
  printf "\e[36mstowing dotfiles\e[0\n"
  cd $DOTFILES_DIR
  for DIR in `ls -d */` ; do
    cd $DOTFILES_DIR/$DIR
    for FILE in `find . -type f -print` ; do
      [ $DRY -eq 0 ] && backup $FILE
    done
    [ $VERBOSE -eq 1 ] && echo "... stowing $DIR"
    # Copy directory structure so that stow links files NOT directories
    find . -mindepth 1 -type d -exec mkdir -p $HOME/{} \;
    [ $DRY -eq 0 ] && stow -v --ignore=.swp --ignore=.bak -t $HOME .
    [ $DRY -eq 1 ] && stow --simulate -v --ignore=.swp --ignore=.bak -t $HOME .
  done
}

# Just update system, assuming it's already been installed.
command_update() {
  echo "Updating system"
  cd $REPOSITORY_DIR
  git pull
  brew update
  brew upgrade
  npm update -g
}

# Housekeeping and keeping things clean.
command_clean() {
  clean-brew
}

# Unistall dotfiles. Note that this does not (at this time), unstill brew
# packages.
command_uninstall() {
  echo "Uninstalling dotfiles ..."
  command_unstow
  echo "... uninstalled"
}

# Unstow dotfiles.
command_unstow() {
  echo "... unstowing files"
  cd $DOTFILES_DIR
  for DIR in `ls -d */` ; do
    cd $DOTFILES_DIR/$DIR
    [ $DRY -eq 0 ] && stow -v --delete -t $HOME .
    for FILE in `find . -type f -print` ; do
      restore $FILE
    done
  done
}

# Set a dotme local variable
command_set() {
  envFile=~/.config/dotme/.env
  name=${2}
  if [[ -z "$name" ]] ; then
    if [[ -f $envFile ]] ; then
      echo $envFile
      cat $envFile
    else
      echo "... $envFile not yet created"
    fi
    return
  fi
  name=`echo MY_$name | tr a-z A-Z`
  value=$3
  if [[ -z "$value" ]] ; then
    if [[ -f $envFile ]] ; then
      if grep -q "$name=" $envFile ; then
        echo $envFile
        grep "$name=" $envFile
      else
        echo "... $name not set"
      fi
    else
      echo "... $envFile not yet created"
    fi
    return
  fi
  echo "...setting dotme env - $name = $value"
  mkdir -p ~/.config/dotme
  touch $envFile
  if grep -q "$name=" $envFile ; then
    sed -i.bak "s/$name=.*/$name=$value/g" $envFile
  else
    echo "$name=$value" >> $envFile
  fi
}

OPTIND=1         # Reset in case getopts has been used previously in the shell.

# Initialize our own variables:
VERBOSE=0

while getopts "h?vdq" opt; do
  case "$opt" in
  h|\?)
    command_help
    exit 0
    ;;
  d) DRY=1
    ;;
  q) QUICK=1
    ;;
  v) VERBOSE=1
    ;;
  esac
done

shift $((OPTIND-1))

[ "${1:-}" = "--" ] && shift

COMMAND=${1:-install}

command_${COMMAND} $@
if [ $? = 127 ]; then
  echo "'$COMMAND_NAME' is not a known command or has errors." >&2
  usage
  exit 1
fi
