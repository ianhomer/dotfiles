#!/usr/bin/env bash

$(shim) && cd ${ME} && . bin/i.sh

OPTIND=1
while getopts "hn:" o; do case "$o" in
  h) help="y" ;;
  n) key_name=$OPTARG ;;  # Qualifying name of key file
esac done

if [[ -n "$help" ]] ; then
  cat <<EOF
Set up an SSH key which can used for

* GitHub personal SSH key for general access
* GitHub repository deploy key for specific repository access
* Other git platforms
* SSH key for passwordless logins

Set up a default key

  dotme-key

Use a different email address

  dotme-key me@email.test

Use a different key name, e.g. ~/.ssh/id_dotme_alt

  dotme-key -n alt
EOF
  exit
fi


log::info "Setting up SSH key"

if [[ -z "$1" ]] ; then
   . ${ME}/bin/dotenv
else
  MY_EMAIL=$1
fi

if [[ -z "$MY_EMAIL" ]] ; then
  read -p "Your email address? " MY_EMAIL
  dotme set EMAIL ${MY_EMAIL}
fi
log::info "My email ${MY_EMAIL}"

if [[ -n "${key_name}" ]] ; then
  keyFile=~/.ssh/id_dotme_${key_name}
else
  keyFile=~/.ssh/id_dotme
fi

if [[ ! -f $keyFile ]] ; then
  log:: "... creating SSH key for : $MY_EMAIL"
  ssh-keygen -t ed25519 -C $MY_EMAIL \
    -f $keyFile                          \
    -q -N ""
else
  log:: "... SSH key has already been created"
fi

log:: "... key file = ${keyFile}.pub"
if hash pbcopy 2>/dev/null ; then
  cat "${keyFile}.pub" | pbcopy
  log:: "... public key is in clipboard"
else
  cat "${keyFile}.pub"
fi

sshConfig="$HOME/.ssh/config"
if [[ ! -f ${sshConfig} ]] ; then
  log:: "Creating "
cat <<EOF > ${sshConfig}
Host *
  AddKeysToAgent yes
  IdentityFile ${keyFile}
EOF
  if is-macos ; then
cat <<EOF >> ${sshConfig}
  UseKeychain yes
EOF
  fi
fi

