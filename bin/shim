#!/usr/bin/env bash
#
# Output shell script that can be sourced as a shim for the environment
#

set -e

DOTME_CONFIG=$HOME/.config/dotme
LOCAL_SHIM=$DOTME_CONFIG/.shim

if [[ $# -eq 0 ]] && [[ -f "$LOCAL_SHIM" ]] ; then
  cat $LOCAL_SHIM
  exit 0
fi

help() {
  cat << EOF
  -f force dynamic shim (not from cache)
  -h this help
  -i variables as ini file
  -o (termux|macos)
  -u update local shim cache
EOF
}

OPTIND=1
while getopts "fhio:u" o; do case "$o" in
  f) FORCE=y ;;
  h) help && exit 0 ;;
  i) INI=y ;;
  o) OS=$OPTARG ;;
  u) UPDATE=y ;;
  *) exit 1 ;;
esac done
shift $((OPTIND-1))

#
# Update local shim cache
#
if [[ "$UPDATE" = "y" ]] ; then
  DOTFILES_BIN="$(cd "$(dirname "${BASH_SOURCE[0]}")" >/dev/null 2>&1 && pwd)"
  . ${DOTFILES_BIN}/functions/log.sh
  mkdir -p $DOTME_CONFIG

  # Update .shim
  LOCAL_SHIM=$HOME/.config/dotme/.shim
  if [[ -f "$LOCAL_SHIM" ]] ; then
    CURRENT_SHIM=$(cat $LOCAL_SHIM)
  fi
  NEW_SHIM=$(shim -f)
  if [[ "${CURRENT_SHIM}" != "${NEW_SHIM}" ]] ; then
    log:: "updating local shim"
    cat <<EOF > $LOCAL_SHIM
$NEW_SHIM
EOF
  fi
  # Update shim.ini
  LOCAL_SHIM=$HOME/.config/dotme/shim.ini
  if [[ -f "$LOCAL_SHIM" ]] ; then
    CURRENT_SHIM=$(cat $LOCAL_SHIM)
  fi
  NEW_SHIM=$(shim -fi)
  if [[ "${CURRENT_SHIM}" != "${NEW_SHIM}" ]] ; then
    log:: "updating local shim ini"
    cat <<EOF > $LOCAL_SHIM
$NEW_SHIM
EOF
  fi
  exit 0
fi

if [[ "$FORCE" == "y" ]] || [[ ! -f "$LOCAL_SHIM" ]] ; then
  #
  # Load dotme .env
  #
  MY_NOTES="my-notes"
  MY_DO="-WOR"
  export ENV=~/.config/dotme/.env
  [[ -f $ENV ]] && export $(cat $ENV| xargs)

  #
  # Imply the OS value from the underlying OSTYPE
  #
  if [[ -z "$OS" ]] ; then
    case $OSTYPE in
      linux-android)
        SHIM_OS="termux"  ;;
      darwin*)
        SHIM_OS="macos"   ;;
      *)
        SHIM_OS="$OSTYPE" ;;
    esac
  fi

  if [[ "$SHIM_OS" = "termux" ]] ; then
    THINGS_DIR=$HOME/storage/shared/projects/things
  else
    THINGS_DIR=$HOME/projects/things
  fi

  if [[ "$SHIM_OS" = "macos" ]] ; then
    SHIM_SED="gsed"
    SHIM_STAT="gstat"
  else
    SHIM_SED="sed"
    SHIM_STAT="stat"
  fi
 
  if command -v dotme &> /dev/null ; then
    DOTFILES_BIN="$(cd "$(dirname `command -v dotme`)" >/dev/null 2>&1 && pwd)"
  else
    DOTFILES_BIN="$(cd "$(dirname "${BASH_SOURCE[0]}")" >/dev/null 2>&1 && pwd)"
  fi

  DOTFILES_DIR="$(cd $DOTFILES_BIN/.. && pwd)"

  if [[ "$INI" = "y" ]] ; then
    cat <<EOF
[DEFAULT]
DOTFILES_BIN = $DOTFILES_BIN
DOTFILES_DIR = $DOTFILES_DIR
DOTME_CONFIG = $DOTME_CONFIG
ME = $DOTFILES_DIR
MY_NOTES = $MY_NOTES
MY_DO = $MY_DO
SHIM_LOADED = 1
SHIM_OS = $SHIM_OS
SHIM_SED = $SHIM_SED
SHIM_STAT = $SHIM_STAT
THINGS_DIR = $THINGS_DIR
EOF
  else
    cat <<EOF
export DOTFILES_BIN=$DOTFILES_BIN
export DOTFILES_DIR=$DOTFILES_DIR
export DOTME_CONFIG=$DOTME_CONFIG
export ME=$DOTFILES_DIR
export MY_NOTES=$MY_NOTES
export MY_DO=$MY_DO
export SHIM_LOADED=1
export SHIM_OS=$SHIM_OS
export SHIM_SED=$SHIM_SED
export SHIM_STAT=$SHIM_STAT
export THINGS_DIR=$THINGS_DIR
EOF
  fi
else
  cat $LOCAL_SHIM
fi
